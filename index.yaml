openapi: 3.0.0
info:
  version: 1.3.0
  title: Astro Data API
  description: Send and receive telegrams about observations of astronomical events.

servers:
  - url: https://api.astrodatanet.org/api/v1
    description: Main API server
  - url: https://astro-data-api-git-develop-extracat-projects.vercel.app/api/v1
    description: Develop API server
  - url: http://localhost:8080/api/v1
    description: Localhost API server

tags:
- name: telegrams
  description: Operations about ADN telegrams
- name: users
  description: Operations about users
- name: mock-objects
  description: Template endpoint for testing purposes


###########################
#####    Endpoints    #####
###########################

paths:

  /telegrams:
    get:
      tags:
        - telegrams
      summary: Get an array of telegrams
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Telegram'
              examples:
                Array:
                  $ref: '#/components/examples/TelegramArray'
        404:
          $ref: '#/components/responses/404Notfound'
        500:
          $ref: '#/components/responses/500ServerError'

    post:
      tags:
        - telegrams
      summary: Post a new telegram
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        description: Post a new telegram
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Telegram'
            examples:
              Object:
                $ref: '#/components/examples/TelegramPost'
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Telegram'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500ServerError'

  /telegrams/{telegramId}:
    parameters:
      - in: path
        name: telegramId
        description: The identifier of the telegram. Short human readable like ADN231231A and ObjectId are both valid.
        required: true
        schema:
          description: Human readable or ObjectId
          type: string
    get:
      tags:
        - telegrams
      summary: Get telegram by ID
      responses:
        200:
          description: The corresponding telegram
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Telegram'
              examples:
                Object:
                  $ref: '#/components/examples/Telegram'
        400:
          $ref: '#/components/responses/400BadRequest'
        404:
          $ref: '#/components/responses/404Notfound'
        500:
          $ref: '#/components/responses/500ServerError'

    put:
      tags:
        - telegrams
      summary: Update telegram by ID
      security: 
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Telegram'
      responses:
        200:
          description: Telegram successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Telegram'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404Notfound'
        500:
          $ref: '#/components/responses/500ServerError'

    patch:
      tags:
        - telegrams
      summary: Partially update telegram by ID
      security: 
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Telegram'
      responses:
        200:
          description: Telegram successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Telegram'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404Notfound'
        500:
          $ref: '#/components/responses/500ServerError'

    delete:
      tags:
        - telegrams
      summary: Delete telegram by ID
      security: 
        - bearerAuth: []
      responses:
        200:
          description: Telegram successfully deleted
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404Notfound'
        500:
          $ref: '#/components/responses/500ServerError'

  #####  Mock object endpoints  #####

  /mock-objects:
    get:
      tags:
        - mock-objects
      summary: Get all objects
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MockObject'
              examples:
                Array:
                  $ref: '#/components/examples/MockObjectArray'
        404:
          $ref: '#/components/responses/404Notfound'
        500:
          $ref: '#/components/responses/500ServerError'

    post:
      tags:
        - mock-objects
      summary: Post an object
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        description: A new object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MockObject'
            examples:
              Object:
                $ref: '#/components/examples/MockObjectPost'
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockObject'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500ServerError'

  /mock-objects/{mockObjectId}:
    parameters:
      - in: path
        name: mockObjectId
        description: The identifier of the object
        required: true
        schema:
          description: ObjectId
          type: string
    get:
      tags:
        - mock-objects
      summary: Get object by ID
      responses:
        200:
          description: The corresponding object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockObject'
              examples:
                Object:
                  $ref: '#/components/examples/MockObject'
        400:
          $ref: '#/components/responses/400BadRequest'
        404:
          $ref: '#/components/responses/404Notfound'
        500:
          $ref: '#/components/responses/500ServerError'

    put:
      tags:
        - mock-objects
      summary: Update object by ID
      security: 
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MockObject'
      responses:
        200:
          description: Object successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockObject'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404Notfound'
        500:
          $ref: '#/components/responses/500ServerError'

    patch:
      tags:
        - mock-objects
      summary: Partially update object by ID
      security: 
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MockObject'
      responses:
        200:
          description: Object successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockObject'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404Notfound'
        500:
          $ref: '#/components/responses/500ServerError'

    delete:
      tags:
        - mock-objects
      summary: Delete object by ID
      security: 
        - bearerAuth: []
      responses:
        200:
          description: Object successfully deleted
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404Notfound'
        500:
          $ref: '#/components/responses/500ServerError'


###########################
#####     Schemas     #####
###########################

components:

  schemas:
    
    ##### Telegram data model #####

    Telegram:
      type: object
      required:
        - title
        - authors
        - body
        - band
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        adn_id:
          $ref: '#/components/schemas/AdnId'
        user_id:
          $ref: '#/components/schemas/ObjectId'
        timestamp:
          description: Telegram record creation time (UTC)
          type: string
          format: date-time
        event_datetime:
          description: Space event time (UTC)
          type: string
          format: date-time
        title:
          description: Telegram title (plain string)
          type: string
        authors:
          description: Authors (plain string)
          type: string
        authors_list:
          description: List of authors parsed from authors plain string
          type: array
          items:
            $ref: '#/components/schemas/Author'
        body:
          description: Text of telegram (markdown text)
          type: string
          format: markdown
        light_curve:
          type: array
          items:
            $ref: '#/components/schemas/LightCurvePoint'
        upper_limits:
          type: array
          items:
            $ref: '#/components/schemas/UpperLimitsArea'
        band:
          description: radio | ir | optical | uv | x-ray | gamma
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        references:
          $ref: '#/components/schemas/References'

    ##### Observations data model #####

    LightCurvePoint:
      type: object
      required: 
        - coordinates
        - datetime
        - exptime
        - instrument
        - filter
      anyOf:
      - required: 
        - magnitude
      - required: 
        - upper_limit
      - required:
        - upper_limit
        - magnitude
      properties:
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        datetime:
          type: string
          format: date-time
        magnitude:
          type: number
        upper_limit:
          type: number
        exptime:
          description: Exposition (seconds)
          type: number
        instrument:
          $ref: '#/components/schemas/Instrument'
        filter:
          description: I | R | V | B | W | C
          type: string

    UpperLimitsArea:
      type: object
      properties:
        framae:
          $ref: '#/components/schemas/Area'
        datetime:
          type: string
          format: date-time
        upper_limit:
          type: number
        exptime:
          description: Exposition (seconds)
          type: number
        instrument:
          $ref: '#/components/schemas/Instrument'
        filter:
          description: I | R | V | B | W | C
          type: string

    DOI:
      description: Digital object identifier
      type: string
      example: 10.1109/5.771073

    ExternalId:
      description: External ID like GCN num, AT num, ATel num, etc ...
      type: string
      example: GCN 36060
  
    References:
      description: References to DOI articles or ADN, GCN, ATel, TNS, etc.
      type: array
      items:
        anyOf:
        - $ref: '#/components/schemas/DOI'
        - $ref: '#/components/schemas/AdnId'
        - $ref: '#/components/schemas/ExternalId'
        - type: string

    ##### Coordinates objects #####

    Angle:
      description: This value is in degrees
      type: number
      format: float

    SPoint:
      description: This is a point on the sphere
      type: object
      required:
      - RightAscension
      - Declination
      properties:
        RightAscension:
          allOf:
          - $ref: '#/components/schemas/Angle'
          minimum: 0.0
          maximum: 360.0
          exclusiveMaximum: True
        Declination:
          allOf:
          - $ref: '#/components/schemas/Angle'
          minimum: -90.0
          maximum: +90.0
    
    Area:
      description: Area on the sphere (This is a spherical polygon)
      type: array
      minItems: 3
      items:
        $ref: '#/components/schemas/SPoint'

    Coordinates:
      description: Coordinates with error (This is a spherical circle)
      allOf:
      - $ref: '#/components/schemas/SPoint'
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/Angle'
          minimum: 0.0
          maximum: 180.0
    
    ##### Common objects #####

    ObjectId:
      description: The unique database ID (ObjectId)
      type: string
    
    AdnId:
      description: Human readable ID
      type: string

    Tag:
      description: Tag or label
      required:
        - text
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        text:
          type: string
        color:
          type: string

    Author:
      type: object
      required:
        - name
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        email:
          type: string
          format: email
        org:
          type: string

    Instrument:
      type: object
      required:
        - name
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        instrument:
          type: string
        observation_mode:
          type: string
        observatory:
          $ref: '#/components/schemas/Observatory'

    Observatory:
      type: object
      required:
        - name
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        org:
          type: string
        country:
          type: string

    ##### Mock object schemas #####

    MockObject:
      description: Mock object schema
      required:
        - name
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string

    ##### Error and success response objects #####

    Error:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          description: error | success
          type: string
        code:
          description: Error code from HTTP header
          type: integer
        message:
          description: A human readable error message
          type: string

    InputError:
      type: object
      required:
        - status
        - code
        - message
        - errors
      properties:
        status:
          description: error | success
          type: string
        code:
          description: Error code from HTTP header
          type: integer
        message:
          description: A human readable error message
          type: string
        errors:
          description: List of validation errors
          type: array
          items:
            $ref: '#/components/schemas/FieldError'

    FieldError:
      type: object
      required:
        - field
        - message
      properties:
        field:
          description: Name of the field which containes error
          type: string
        message:
          description: A human readable error message
          type: string

  responses:

    400BadRequest:
      description: Bad request (e.g., malformed request syntax, invalid request message parameters, or validation error)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InputError'
          example:
            status: error
            code: 400
            message: Validation error
            errors: 
              field: Some field
              message: Can't be empty

    401Unauthorized:
      description: Unauthorized (missing or invalid authentication token)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: error
            code: 401
            message: Unauthorized

    403Forbidden:
      description: Forbidden (the user does not have the necessary permissions)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: error
            code: 403
            message: Forbidden

    404Notfound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: error
            code: 404
            message: Not found
    
    500ServerError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: error
            code: 500
            message: Unexpected error

  examples:

    ##### Telegram object examples #####

    Telegram:
      value:
        _id: 507f1f77bcf86cd799439011
        adn_id: ADN231231A 
        user_id: 507f1f77bcf86cd799439011
        timestamp: 1994-11-05T13:15:30Z
        external_id: GCN 36060
        title: Title of telegram
        authors: John Doe, Jane Doe (Some Institution), etc...
        body: Markdown text
        band: optical

    TelegramPost:
      value:
        title: Title of telegram
        authors: John Doe, Jane Doe (Some Institution), etc...
        body: Markdown text
        band: optical



    TelegramArray:
      value:
        - _id: 507f1f77bcf86cd799439011
          adn_id: ADN231231A 
          user_id: 507f1f77bcf86cd799439011
          timestamp: 1994-11-05T13:15:30Z
          external_id: GCN 36060
          title: Title of telegram
          authors: John Doe, Jane Doe (Some Institution), etc...
          body: Markdown text
          band: optical
          
        - _id: 507f1f77bcf86cd799439011
          adn_id: ADN231231A 
          user_id: 507f1f77bcf86cd799439011
          timestamp: 1994-11-05T13:15:30Z
          external_id: GCN 36060
          title: Title of telegram
          authors: John Doe, Jane Doe (Some Institution), etc...
          body: Markdown text
          band: optical

    ##### Mock object examples #####
    
    MockObject:
      value:
        _id: 507f1f77bcf86cd799439011
        name: Object name
    
    MockObjectPost:
      value:
        name: Object name

    MockObjectArray:
      value:
        - _id: 507f1f77bcf86cd799439011
          name: Object name
        - _id: 507f1f77bcf86cd799439012
          name: Object name

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter your JWT token

